//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Text.Json;



namespace cfg.item
{

public sealed partial class Item :  Bright.Config.BeanBase 
{
    public Item(JsonElement _json) 
    {
        Id = _json.GetProperty("id").GetInt32();
        Name = _json.GetProperty("name").GetString();
        Price = _json.GetProperty("price").GetInt32();
        UpgradeToItemId = _json.GetProperty("upgrade_to_item_id").GetInt32();
        { if (_json.TryGetProperty("expire_time", out var _j) && _j.ValueKind != JsonValueKind.Null) { ExpireTime = _j.GetInt64(); } else { ExpireTime = null; } }
        Quality = (item.EQuality)_json.GetProperty("quality").GetInt32();
        { var __json0 = _json.GetProperty("exchange_list"); ExchangeList = new System.Collections.Generic.List<item.ItemExchange>(__json0.GetArrayLength()); foreach(JsonElement __e0 in __json0.EnumerateArray()) { item.ItemExchange __v0;  __v0 = item.ItemExchange.DeserializeItemExchange(__e0);  ExchangeList.Add(__v0); }   }
        ExchangeColumn = item.ItemExchange.DeserializeItemExchange(_json.GetProperty("exchange_column"));
        PostInit();
    }

    public Item(int id, string name, int price, int upgrade_to_item_id, long? expire_time, item.EQuality quality, System.Collections.Generic.List<item.ItemExchange> exchange_list, item.ItemExchange exchange_column ) 
    {
        this.Id = id;
        this.Name = name;
        this.Price = price;
        this.UpgradeToItemId = upgrade_to_item_id;
        this.ExpireTime = expire_time;
        this.Quality = quality;
        this.ExchangeList = exchange_list;
        this.ExchangeColumn = exchange_column;
        PostInit();
    }

    public static Item DeserializeItem(JsonElement _json)
    {
        return new item.Item(_json);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 价格
    /// </summary>
    public int Price { get; private set; }
    /// <summary>
    /// 引用当前表
    /// </summary>
    public int UpgradeToItemId { get; private set; }
    public item.Item UpgradeToItemId_Ref { get; private set; }
    /// <summary>
    /// 过期时间
    /// </summary>
    public long? ExpireTime { get; private set; }
    /// <summary>
    /// 品质
    /// </summary>
    public item.EQuality Quality { get; private set; }
    public System.Collections.Generic.List<item.ItemExchange> ExchangeList { get; private set; }
    /// <summary>
    /// 道具兑换配置
    /// </summary>
    public item.ItemExchange ExchangeColumn { get; private set; }

    public const int __ID__ = 2107285806;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        this.UpgradeToItemId_Ref = (_tables["item.TbItem"] as item.TbItem).GetOrDefault(UpgradeToItemId);
        foreach(var _e in ExchangeList) { _e?.Resolve(_tables); }
        ExchangeColumn?.Resolve(_tables);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in ExchangeList) { _e?.TranslateText(translator); }
        ExchangeColumn?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Price:" + Price + ","
        + "UpgradeToItemId:" + UpgradeToItemId + ","
        + "ExpireTime:" + ExpireTime + ","
        + "Quality:" + Quality + ","
        + "ExchangeList:" + Bright.Common.StringUtil.CollectionToString(ExchangeList) + ","
        + "ExchangeColumn:" + ExchangeColumn + ","
        + "}";
    }

    partial void PostInit();
    partial void PostResolve();
}
}
